.de Ip
.br
.ie \\n.$>=3 .ne \\$3
.el .ne 3
.IP "\\$1" \\$2
..
.\"
.\"
.TH COMPILER488 1 "Winter 2017" "CSC488 Compiler"
.SH NAME
compiler488 \- a compiler for the CSC488S Project Language
.SH SYNOPSIS
.in +\w'\fBcompiler488 \fR'u
.ti -\w'\fBcompiler488 \fR'u
.B compiler488\
\ \ [\ \fB\-X\fR\ ]\ \ \
[\ \fB\-D\fR[\fIabxy\fR]\ ]\ \ \ [\ \fB\-T\fR[\fIacilpsxy\fR]\ ]\
[\ \fB\-O\fR\ \fIoutputFilename\fR\ ]
.br
\ [\ \fB\-E\fR\ \fIerrorFilename\fR\ ]\
\ [\ \fB\-R\fR\ \fItraceFilename\fR\ ]\
\ [\ \fB\-U\fR\ \fIdumpFilename\fR\ ]
.br
\ [\ \fB\-I\fR\ \fIrunInputFilename\fR\ ]
\ [\ \fI\ sourceFile\ \fR\ ]
.SH DESCRIPTION
.B compiler488
is an incredibly well designed and implemented compiler for the
CSC488S Course Project Language.
.PP
The compiler compiles and then attempts to execute one program
written in the CSC488S Project Language.
The compiler reads the source program from \fIsourceFile\fR
if it was specified in the command that invoked the compiler.
Otherwise it exepcts the source program on standard input.
.SH OPTIONS
The options currently implemented by the
compiler488 are:
.TP 12
.BR \-X
Suppress execution of the compiled program.  Saves time when testing
an incomplete code generator.
.TP
.BR \-D
Specify dump options.  The letters \fIabxy\fR indicate which information
should be dumped to the compilers \fIdumpFile\fR.
.RS
\fIa\fR \- dump Abstract Syntax Tree after Pass 1
.br
\fIb\fR \- dump Abstract Syntax Tree after Pass 2
.br
\fIx\fR \- dump the compiled code just before execution
.br
\fIy\fR \- dump symbol table information
.RE
.TP
.BR \-T
Specify trace options.  The letters \fIacilpsxy\fR indicate which trace
information
should be written to the compilers \fItraceFile\fR.
.RS
\fIa\fR \- trace Abstract Syntax Tree operations
.br
\fIc\fR \- trace code generation
.br
\fIi\fR \- trace source program input in the scanner
.br
\fIl\fR \- trace tokens in lexical analysis
.br
\fIp\fR \- trace parsing
.br
\fIs\fR \- trace semantic analysis
.br
\fIx\fR \- trace program execution
.br
\fIy\fR \- trace symbol table operations
.RE
.TP 12
.BR \-E \ \ \ \fIerrorFile\fR
Specify an alternative file to receive error messages generated by the compiler.
Default for error messages is stderr.
.TP
.BR \-O \ \ \ \fIoutputFileName\fR
Specify an alternative file to receive compilation output 
Default is stdout
.TP
.BR \-R \ \ \ \fItraceFileName\fR
Specify an alternative file to receive compilation trace informantion.
Default for trace information is stdout.
.TP
.BR \-S \ \ \ \fItraceFileName\fR
Specify an alternative file to receive execution trace informantion.
Default for trace information is stdout.
.TP
.BR \-U \ \ \ \fIdumpFileName\fR
Specify an alternative file to receive compiler dump information.
Default for dump information is stdout.
.TP
.BR \-V 
Print information about the compiler488 version on standard output
and continue processing.
.TP
.BR \-I \ \ \ \fIrunInputFileName\fR
Specify an alternative file to serve as a souce of input during
execution of the compiled program.
Default for execution time input is stdin.
.SH ENVIRONMENT
The compiler does not use any environment variables.
.SH SEE ALSO
The CSC488S course bulletin board.
.SH AUTHORS
The 
.B compiler488
skeleton was conceived and implemented by Prof. Dave Wortman.
Conversion from C to Java was partially done by Danny House.
The present version of the skeleton was designed by Profs. Marsha Chechik and Dave Wortman.
.PP
Abstract Symbol  Tree creation, semantic analysis, code generation and the 
symbol table mechanisms
were skillfully designed and implemented by 
.B PUT YOUR NAMES HERE
.SH BUGS
There are none; only a few unexpected features.
.SH DUMPING and TRACING
The compiler driver main program implements the \fC-D\fP and \fC-T\fP
to provide an easy interface to implementation defined dumping and
tracing of the compiler phases.  These flags are provided as 
a convenience for teams that choose to implement this functionality.
.PP
In the current release of the compiler
.br
-\ The scanner and parser trace options ( \fCi, l\fR ) are unimplemented.
.br
-\ AST dumping ( \fCa, b\fP ) is implemented via the AST \fCprintOn\fP interface.
.br
-\ Compiled program dumping ( \fCx\fP ) and program execution tracing ( \fCx\fP ) are
implemented.
.PP
All of the other dump and trace operations implied by this
man page are \fBoptional\fP.  The implementation of these operations
to assist in the debugging of the compiler
is a strategic decision for each team to make.  None of these
dumps or traces are required.
