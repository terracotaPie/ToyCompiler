// Package and import specifications section.

package compiler488.parser  ;

import java_cup.runtime.*;    // Must always import this.

/* User code components 1: action code components.
 * Code to be used inside the actions triggered when productions are matched.
 * If any common code is needed for more than one action , put it here.
 */
// action code {:
// your code goes here
//:}  ;

/* User code components 2: parser code components.
 * Modifications to the default generated parser
 */
parser code {:

  String lastError;

  /* Override the report_error method so it will display the line and
   * column of where the error occurred in the input as well as the
   * reason for the error which is passed into the method in the
   * String 'message'.
   */
  public void report_error(String message, Object info)
  {
    String st =  "Error";

    if (info instanceof java_cup.runtime.Symbol)
    {
      java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info)  ;

      /* s.left is supposed to hold the line number of the error.
       * s.right is supposed to hold the column number.
       */

      if (s.left >::= 0)        // Check line number.
      {
        st += " in line " + (s.left + 1)  ;
        if (s.right >::= 0)     // Check column number.
          st += ", column " + (s.right + 1)  ;
      }
    }
    st += ": " + message;
    System.err.println (st);
    lastError= st;
  }

  // Override the report_fatal_error method to use the report_error method.
  public void report_fatal_error (String message, Object info) throws Exception
  {
    report_error (message, info)  ;
    throw new Exception (lastError)  ;
  }

  // version string for printing version in Main
  public static final String version =
    "Winter 2017"   ;

  :}  ;

  /* User code components 3: initialization code.
   * If you want some code to be executed before the parser asks for the first
   * token, add it here.
   */
  init with {:
    :}  ;

/* User code components 4: scanner specification code.
 * If you need to override the way the parser asks the scanner for the
 * next token, put your preferred method here.  Uncomment the line following
 * this comment, replace the line after that with your code, and uncomment
 * the line after that.
 */
// scan with {:
// your code goes here
// :}  ;

/* Symbol lists section.
 * The names of terminals and non-terminals are not allowed to be CUP
 * reserved words.  These include "code", "action", "parser", "terminal",
 * "non", "nonterminal", "init", "scan", "with", "start", "precedence",
 * "left", "right", "nonassoc", "import", and "package".
 */

// DEFINITIONS for CSC488S Source Language  Winter  2016/2017

// Terminals returned by the scanner with no value attached.
terminal  AND,  OR, NOT,  TRUE, FALSE   ;
terminal  BOOLEAN,INTEGER,FUNCTION,PROCEDURE    ;
terminal  DO, ELSE, EXIT,   IF    ;
terminal  READ,   REPEAT, RETURN, NEWLINE,THEN, UNTIL   ;
terminal  VAR,  WHEN, WHILE,  WITHX,  WRITE     ;

// Special-character terminals, no value attached
terminal  L_PAREN ,R_PAREN, L_SQUARE, R_SQUARE, L_CURLEY, R_CURLEY    ;
terminal  EQUAL,  GREATER, LESS,  COMMA,  DOT, QUESTION, COLON    ;
terminal  PLUS, MINUS,  TIMES,  DIVIDE    ;

// Terminals returned by the scanner with a value.
terminal String  IDENT    ;
terminal Integer INTCONST   ;
terminal String  TEXTCONST    ;

// Non-terminals that have no value.
// nonterminal xxx

nonterminal program;
nonterminal statement;
nonterminal declaration;
nonterminal variablenames;
nonterminal bound;
nonterminal scope;
nonterminal output;
nonterminal input;
nonterminal type;
nonterminal arguments;
nonterminal parameters;
nonterminal variable;
nonterminal expression;
nonterminal variablename;
nonterminal arrayname;
nonterminal functionname;
nonterminal parametername;
nonterminal procedurename;
// added rules
// ----
nonterminal outputcolon;
nonterminal argumentscolon;
nonterminal inputcomma;
nonterminal parameterscomma;
nonterminal maybedeclaration;
nonterminal variablenamescomma;
nonterminal statements;
nonterminal outputcontents;
nonterminal moredeclaration;
nonterminal declarationcontent;
nonterminal conjunction;
nonterminal negation;
nonterminal arithmetic;
nonterminal term;
nonterminal factor;
nonterminal primary;
nonterminal constant;
nonterminal comparison;
nonterminal statementexpression;
nonterminal ifstatement;
nonterminal ifelsestatement;
nonterminal makevar;
nonterminal statementcontent;
nonterminal statementelse;

// Non-terminals that have a value.
// nonterminal type  nameList   ;

// PLEASE NOTE: your grammar can not use the 'precedence'
// feature of java-cup. The lines below should remain
// commented out.
//
//precedence right PLUS, MINUS  ;
//precedence right TIMES, DIVIDE;   // Higher precedence.

// The grammar section.

// This specifies the initial symbol of the grammar.
start with program  ;

/* Notice that sometimes the action must be inside the production rule,
 * not after it.  This is a subtle yet significant difference from YACC.
 * This is because the CUP parser is looking ahead one token.  It ALWAYS
 * reads one more token before it will act on the production.
 */


/*  YOUR CLEVERLY CRAFTED cup GRAMMAR FOR THE CSC488S SOURCE LANGUAGE
 *
 *  GOES HERE
 */

program
    ::= scope
      ;

ifstatement
    ::= IF expression THEN statement
      | IF expression THEN statementelse ELSE statement
      ;

ifelsestatement
    ::= IF expression THEN statementelse ELSE statementelse
      ;

statementelse
    ::= statementcontent
      | ifelsestatement
      ;

statementexpression
    ::= variable COLON EQUAL
      | REPEAT statement UNTIL
      | EXIT WHEN
      | EXIT INTCONST WHEN
      | RETURN WITHX
      ;

statementcontent
    ::= statementexpression expression
      | WHILE expression DO statementelse
      | EXIT
      | EXIT INTCONST
      | RETURN
      | WRITE output
      | READ input
      | procedurename
      | procedurename L_PAREN arguments R_PAREN
      | scope
      ;

statement
    ::= ifstatement
      | statementcontent
      ;

statements ::= statement statements
      |
      ;

declarationcontent
    ::= VAR variablenames COLON type
      | FUNCTION IDENT:fn COLON type scope
        {: RESULT = new functionname(fn.identifierText); :}
      | FUNCTION IDENT:fn L_PAREN parameters R_PAREN COLON type scope
        {: RESULT = new functionname(fn.identifierText); :}
      | PROCEDURE IDENT:pn scope
        {: RESULT = new procedurename(pn.identifierText); :}
      | PROCEDURE IDENT:pn L_PAREN parameters R_PAREN scope
        {: RESULT = new procedurename(pn.identifierText); :}
      ;

moredeclaration
    ::= declaration
      |
      ;

declaration
    ::= declarationcontent moredeclaration
      ;

variablenamescomma
    ::= COMMA variablenames
       |
       ;

makevar
    ::= IDENT:vn
        {: RESULT = new variablename(vn.identifierText); :}
      | IDENT:vn L_SQUARE INTEGER R_SQUARE
        {: RESULT = new arrayname(vn.identifierText); :}
      | IDENT:vn L_SQUARE bound DOT DOT bound R_SQUARE
        {: RESULT = new arrayname(vn.identifierText); :}
      ;

variablenames
    ::= makevar variablenamescomma
      ;

bound
    ::= INTCONST
      | MINUS INTCONST
      ;

maybedeclaration
    ::= declaration
      |
      ;

scope
    ::= L_CURLEY maybedeclaration statements R_CURLEY
      ;

outputcolon
    ::= COLON output
      |
      ;

outputcontents
    ::= expression
      | TEXTCONST
      | NEWLINE
      ;

output
    ::= outputcontents outputcolon
      ;

variable
    ::= variablename
      | variablename L_SQUARE expression R_SQUARE
      ;

inputcomma
    ::= COMMA input
      |
      ;

input
    ::= variable inputcomma
      ;

type
    ::= INTEGER
      | BOOLEAN
      ;

argumentscolon
    ::= COLON arguments
      |
      ;

arguments
    ::= expression argumentscolon
      ;

parameterscomma
    ::= COMMA parameters
      |
      ;

parameters
    ::= IDENT:pn COLON type parameterscomma
        {: RESULT = new parametername(pn.identifierText); :}
      ;


expression
    ::= conjunction
      | expression OR conjunction
      ;

conjunction
     ::=  negation
      | conjunction AND negation
      ;

negation
    ::= comparison
      | NOT negation
      ;

comparison
    ::= arithmetic
      | arithmetic EQUAL arithmetic
      | arithmetic NOT EQUAL arithmetic
      | arithmetic LESS arithmetic
      | arithmetic LESS EQUAL arithmetic
      | arithmetic GREATER arithmetic
      | arithmetic GREATER EQUAL arithmetic
      ;

arithmetic
    ::= term
      | arithmetic PLUS term
      | arithmetic MINUS term
      ;

term
    ::= factor
      | term TIMES factor
      | term DIVIDE factor
      ;

factor
    ::= primary
      | MINUS factor
      ;

primary
    ::= constant
      | variable
      | L_PAREN expression R_PAREN
      | L_PAREN expression QUESTION expression COLON expression R_PAREN
      | IDENT L_PAREN argumentscolon R_PAREN
      ;

constant
    ::= INTCONST
      | TRUE
      | FALSE
      ;

variable
    ::= IDENT
      | IDENT L_SQUARE expression R_SQUARE
      | IDENT L_SQUARE expression COMMA expression R_SQUARE
      ;
