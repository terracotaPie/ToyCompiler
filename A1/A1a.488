% Contributors: Nagee Elghassein
%
% This file tests the usage of arithmetic, logical, and comparison operators
{
    % test functions:
    procedure testInt(actual : Integer, expected : Integer, id : Integer) {
        if actual = expected then 
            write "✓ (id ", id, ")"
        else
            write "✗ (id", id, ")" 
    }

    procedure testBool(actual : Boolean, expected : Boolean, id : Integer) {
        if actual = expected then 
            write "✓ (id ", id, ")"
        else
            write "✗ (id", id, ")" 
    }

    %% Arithmetic Tests

    % integer constants and unary minus will be used in the tests

    % addition test
    testInt(1 + 2, 3, 1) 
    testInt(2 + 1, 3, 2) 

    % subtraction test
    testInt(0 - 1, -1, 3) 

    % multiplication test
    testInt(2 * 3, 6, 4) 
    % the below is a subtest, hence indented with two spaces
    testInt(3 * 2, 6, 5) 

    % division test
    testInt(6 / 2, 3, 6) 
    % div by 0 catchInt(1 / 0) ... (don't know how to handle errors atm)


    %% Logical Tests

    % logical not test
    testBool(not True, False, 7) 
    testBool(not False, True, 8) 

    % logical and test
    testBool(True and True, True, 9) 
    testBool(True and False, False, 10) 
    testBool(False and True, False, 11) 
    testBool(False and False, False, 12) 

    % logical or test
    testBool(True or True, True, 13) 
    testBool(True or False, True, 14) 
    testBool(False or True, True, 15) 
    testBool(False or False, False, 16) 


    %% Comparison Tests

    % equality test
    testBool(1 = 1, True, 17) 
    testBool(1 = 2, False, 18) 

    % inequality test
    testBool(1 not = 2, True, 19) 
    testBool(1 not = 1, False, 20) 

    % less than test
    testBool(1 < 2, True, 21) 
    testBool(1 < 1, False, 22) 

    % greator than test
    testBool(2 > 1, True, 23) 
    testBool(1 > 2, False, 24) 

    % less than or equal test
    testBool(1 <= 2, True, 25) 
    testBool(1 <= 1, True, 26) 
    testBool(1 <= 0, False, 27) 

    % greater than or equal test
    testBool(2 >= 1, True, 28) 
    testBool(1 >= 1, True, 29) 
    testBool(0 >= 1, False, 30) 
}
