% Contributors: Hong Zhi Yew
%
% This file tests using non-recursive functions and procedures with and without parameters
{
    var glob_arr [ 5 ] : Integer
    var toggle : Boolean

    % Function with parameters
    % This returns a^p
    function power ( a : Integer , p : Integer ) : Integer
    {
        var pl , i : Integer
        pl : = p
        i : = 1
        while ( pl not = 0 ) do
        {
            if ( pl < 0 ) then
            {
                i : = i / a
                pl : = pl + 1
            }
            else
            {
                i : = i * a
                pl : = pl - 1
            }
        }
        return with i
    }

    % Function without parameters
    % This inverts the global variable toggle and returns it
    function NextChangingBool : Boolean
    {
        toggle : = not toggle
        return with toggle
    }

    % Procedure with parameters
    % This prints OK if a == b and BAD and their values otherwise
    procedure PrintAssertEq ( a : Integer , b : Integer )
    {
        if ( a = b ) then
            write "OK" , newline
        else
            write "BAD " , a , " =/= " , b , newline
    }

    % Procedure without parameters
    % This populates glob_arr [ i ] with 2^i for i = 1 .. 5
    procedure PopulateGlobVar
    {
        var i : Integer
        i : = 1
        repeat
        {
            glob_arr [ i ] : = power ( 2 , i )
            i : = i + 1
        } 
        until i = 5
    }

    toggle : = false

    PrintAssertEq ( 1 , 1 ) % This should print OK
    PrintAssertEq ( 1 , 2 ) % This should print BAD 1 =/= 2

    PrintAssertEq ( power ( 2 , 3 ) , 8 ) % test if 2^3 = 8

    % Make sure NextChangingBool returns true on first run and false on second run
    if NextChangingBool then
        write "OK", newline
    else
        write "TOGGLE FAIL", newline

    if not NextChangingBool then
        write "OK", newline
    else
        write "TOGGLE FAIL", newline

    % populates glob_arr and make sure the 4th element is 16
    PopulateGlobVar
    PrintAssertEq ( glob_arr [ 4 ] , 16 )
}
