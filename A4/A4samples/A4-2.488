% Assignment 4 Sample Program 2                   % 2-1
{                                                 % 2-2
   var a, b, c , d : Integer                      % 2-3
   var p, q, r : Boolean                          % 2-4
   a := b + c - d*c + b/c                         % 2-5
   p := not false or not q and r                  % 2-6
   if p then  a := 3                              % 2-7
   if p or not p then b := 2 else b := 0          % 2-8
   while c < 7 do  c := 6                         % 2-9
   while true do  b := b + 1                      % 2-10
   repeat { a := 3 exit b := 7 } until false      % 2-11
   while q or r and not p do  exit when b not= 10 % 2-12
   write "Value is " , a / b, " or not ", newline	% 2-13
   read  a, c, b                                  % 2-14
   {                                              % 2-15
       var a, b, c : Boolean                      % 2-16
       a := not p or q                            % 2-17
       {                                          % 2-18
          var p, q, r : Integer                   % 2-19
          p := ( b ? q : r )                  An instruction may occupy one, two, or three words of memory. The first word contains an op-code, specifying    % 2-20
       }                                        % 2-21
   }                                            % 2-22
   while true do  {  %1                           % 2-23
       exit when p or r %1                        % 2-24
       repeat  {                                % 2-25
          var w, x : Integer                    % 2-26
          if w <= a then exit                   % 2-27
          while  p or q or r do %3                % 2-28
             {                                  % 2-29
                var  t, u : Integer             % 2-30
                p := not q                      % 2-31
                t := ( p or q ? t + 1 : t - 1 )	% 2-32
	        exit 3 when t > 12                    % 2-33
             } % while				                  % 2-34
             exit 2                             % 2-35
        } until p and r % repeat	%2		          % 2-36
   } % while						                        % 2-37
}                                               % 2-38
%%%%%
% a,b,c,d = 4 (0,1,2,3)
% p,q,r = 3 (4,5,6)
% Total: 3 + 4 = 7
%%%%%%
PUSHMT -% Push stack pointer onto stack
SETD 0 -% set display
PUSH UNDEFINED % unitialized vars are undefined
PUSH 7
DUPN % alloc

%%
% using var names for easy reading
%%

% 2-5 'a := b + c - d*c + b/c'
% b + (c - ((d*c) + (b/c)))
ADDR 0 a           % [a]
ADDR 0 b           % [a b]
ADDR 0 c           % [a b c]
ADDR 0 d           % [a b c d]
LOAD               % [a b c 'd]
ADDR 0 c           % [a b c 'd c]
LOAD               % [a b c 'd 'c]
MUL                % [a b c ('d*'c)]
ADDR 0 b           % [a b c ('d*'c) b]
LOAD               % [a b c ('d*'c) 'b]
ADDR 0 c           % [a b c ('d*'c) 'b c]
LOAD               % [a b c ('d*'c) 'b 'c]
DIV                % [a b c ('d*'c) ('b/'c)]
ADD                % [a b c (('d*'c) + ('b/'c))]
SUB                % [a b (c - ('d*'c) + ('b/'c))]
ADD                % [a (b + (c - (d*c) + (b/c))]
STORE              % [a]       a := b + c - (d*c) + (b/c)

% 2-6 'p := not false or not q and r'
ADDR 0	p          % [p]
PUSH MACHINE_FALSE % [p false]
NEG                % [p -false]
PUSH 1             % [p -false 1]
ADD                % [p notFalse]
ADDR 0 q           % [p notFalse q]
LOAD               % [p notFalse 0]
NEG                % [p notFalse -0]
PUSH 1             % [p notFalse -0 1]
ADD                % [p notFalse !q]
ADDR 0 r           % [p notFalse !q r]
LOAD               % [p notFalse !q r]
MUL                % [p notFalse ( !q & r )]
OR                 % [p ( notFalse | ( !q & r ) )]
STORE              % []

% 2-7 'if p then  a := 3'
ADDR 0 p           % [p]
LOAD               % [p]
PUSH else_address  % [p else_address]
BF                 % []
ADDR 0 a           % [a]
PUSH 0 3           % [a 3]
STORE              % []

% 2-8 'if p or not p then b := 2 else b := 0'
ADDR 0 p          % [p]
LOAD
ADDR 0 p          % [p p]
LOAD
NEG               % [p -p]
PUSH 1            % [p -p 1]
ADD               % [p !p]
OR                % [( p | !p )]
PUSH else_address % [( p | !p ) else_address]
BF                % []
                  % THEN
ADDR 0 b          % [b]
PUSH 2            % [b 2]
STORE             % []
PUSH end_address  % [end_address]
BR                % []
                  % ELSE
ADDR 0 b          % [b]
PUSH 0            % [b 0]
STORE             % []

% 2-9 'while c < 7 do  c := 6'
% loop_cond
ADDR 0 c % [c]
LOAD     % [c]
PUSH 7   % [c 7]
LT
% if ! ( C < 7 ) exit
NEG
PUSH 1
ADD
PUSH exit_address % the address of the end of the loop
BF
ADDR 0 c          % [c]
PUSH 6            % [c 6]
STORE             % []
PUSH loop_cond_address    % [loop_cond_address]
BR                % go to loop condition
                  % exit_address

% 2-10 while true do  b := b + 1
% loop_cond_address
PUSH MACHINE_TRUE
NEG
PUSH 1
ADD
PUSH exit_address % the address of the end of the loop
BF                % if not true then exit
ADDR 0 b          % [b]
ADDR 0 b          % [b b]
LOAD              % [b b]
PUSH 1            % [b b 1]
ADD               % [b ( b + 1 )]
STORE             % []
PUSH loop_cond_address    % [loop_cond_address]
BR                % go to loop condition
% exit_address

% 2-11 'repeat { a := 3 exit b := 7 } until false'
%loop_begin_address
ADDR 0 a % [a]
PUSH 3   % [a 3]
STORE    % []
PUSH exit_address
BR
ADDR 0 b % [b]
PUSH 3   % [b 7]
STORE    % []
PUSH MACHINE_FALSE
PUSH loop_begin_address
BF

% 2-12 while q or r and not p do exit when b not= 10
ADDR 0 q % [q]
LOAD
ADDR 0 r % [q r]
LOAD
ADDR 0 p % [q r p]
LOAD     % [q r p]
NEG      % [q r -p]
PUSH 1   % [q r -p 1]
ADD      % [q r !p]
AND  % [q ( r and !p )
OR   % [( q or ( cr and !pc ) )]
NEG
PUSH 1
ADD
PUSH exit_address
BF
ADDR 0 b
LOAD
NEG
PUSH 1
ADD
PUSH 10
EQ
PUSH MACHINE_FALSE
EQ
PUSH exit_address
BF
PUSH loop_begin_address
BR

% 2-13 'write "Value is " , a / b, " or not ", newline'
PUSH 'V'
PUSH 'a'
PUSH 'l'
PUSH 'u'
PUSH 'e'
PUSH ' '
PUSH 'i'
PUSH 's'
PUSH ' '
PRINT
PRINT
PRINT
PRINT
PRINT
PRINT
PRINT
PRINT
PRINT

ADDR 0 a
LOAD
ADDR 0 b
LOAD
DIV
PRINT

PUSH 'o'
PUSH 'r'
PUSH ' '
PUSH 'n'
PUSH 'o'
PUSH 't'
PUSH '\n'
PRINT
PRINT
PRINT
PRINT
PRINT
PRINT
PRINT
% 2-14 'read  a, c, b'
ADDR 0 a
READI
STORE
ADDR 0 c
READI
STORE
ADDR 0 b
READI
STORE

% 2-15 '{'
ADDR 1 0       % put pointer on stack
PUSHMT         % push stack pointer
SETD 1

% 2-16    'var a, b, c : Boolean'
PUSH UNDEFINED % a
PUSH UNDEFINED % b
PUSH UNDEFINED % c

% 2-17    'a := not p or q'
ADDR 1 a       % [a]
ADDR 0 p       % [a p]
LOAD           % [a ( p )]
NEG            % [a ( -p )]
PUSH 1         %[a ( -p 1 )]
ADD            % [a !p]
ADDR 1 q       % [a !p q]
LOAD           % [a !p 'q]
OR             % [a ( !p or 'q )]
STORE []
% 2-18    '{'
ADDR 2 0 % 2 scope stack pointer
PUSHMT % push stack pointer
SETD 2
% 2-19          'var p, q, r : Integer'
PUSH UNDEFINED % p
PUSH UNDEFINED % q
PUSH UNDEFINED % r
% 2-20          'p := ( b ? q : r )'
ADDR 2 b
LOAD
NEG
PUSH 1
ADD
PUSH else_address
ADDR 1 p
ADDR 2 q
LOAD
STORE
PUSH end_statement
BR
%else_address
ADDR 1 p
ADDR 2 r
LOAD
STORE
%end_statement

% 2-21    '}'
POP            % r
POP            % q
POP            % p
SETD    2      % exit_scope
% 2-22 '}'
POP            % c
POP            % b
POP            % a
SETD    1      % exit scope

% 2-23  while true do {
PUSH MACHINE_TRUE
NEG
PUSH 1
ADD
PUSH exit_address_1 % the address of the end of the loop
BF                % if not true then exit

% 2-24 exit when p or r
ADDR 0 p % [p]
LOAD
ADDR 0 r % [p r]
LOAD
OR % [(p or r)]
NEG
PUSH 1
ADD
PUSH exit_address_1
BF

% 2-25 repeat {
ADDR 1 0       % put pointer on stack
PUSHMT         % push stack pointer
SETD 1

% 2-26 var w, x : Integer
PUSH UNDEFINED % w
PUSH UNDEFINED % x

% 2-27 if w <= a then exit
ADDR 1 w    % [w]
LOAD
PUSH 1
ADDR 1 a    % [w a]
LOAD
ADD
LT
NEG
PUSH 1
ADD
PUSH exit_address_2
BF

% 2-28 while  p or q or r do
ADDR 0 p    % [p]
LOAD
ADDR 0 q    % [p q]
LOAD
ADDR 0 r    % [p q r]
LOAD
OR
OR    % [(p or q or r)]
NEG
PUSH 1
ADD
PUSH exit_address_3
BF

% 2-29 {
ADDR 2 0       % put pointer on stack
PUSHMT         % push stack pointer
SETD 2

% 2-30 var  t, u : Integer
PUSH UNDEFINED    % t
PUSH UNDEFINED    % u

% 2-31 p := not q
ADDR 0 p    % [p]
ADDR 0 q    % [p q]
LOAD
NEG         % [p -q]
PUSH 1
ADD
STORE

% 2-32 t := ( p or q ? t + 1 : t - 1 )
ADDR 0 p    % [p]
LOAD
ADDR 0 q    % [p q]
LOAD
OR          % [(p or q)]
NEG
PUSH 1      % [(-(p or q)) 1]
ADD
PUSH else_address
BF
ADDR 2 t
ADDR 2 t
LOAD
PUSH 1
ADD
STORE
PUSH end_statement
BR
%else_address
ADDR 2 t
ADDR 2 t
LOAD
PUSH 1
NEG
ADD
STORE

% 2-33 exit 3 when t > 12
PUSH -1
ADDR 2 t
LOAD
MULT
PUSH -1
PUSH 12
MULT
LT
PUSH 4
POPN

% 2-34 } % while
PUSH loop_begin_address
BR

% 2-35 exit 2
PUSH 2
POPN

% 2-36 } until p and r % repeat
ADDR 0 p
LOAD
PUSH MACHINE_FALSE
EQ
ADDR 0 r
LOAD
PUSH MACHINE_FALSE
EQ
OR
PUSH MACHINE_FALSE
EQ
LOAD exit_address_2
BF
PUSH loop_begin_address
BR

% 2-37
PUSH 2
POPN

% 2-38
PUSH loop_cond_address    % [loop_cond_address]
BR                % go to loop condition

HALT
